"""empty message

Revision ID: 4f7894111670
Revises: 461954fdf449
Create Date: 2021-11-03 18:23:13.593829

"""
import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "4f7894111670"
down_revision = "461954fdf449"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("sent")
    op.drop_index("ix_positions_id", table_name="positions")
    op.drop_table("positions")
    op.drop_index("ix_companies_id", table_name="companies")
    op.drop_table("companies")
    op.drop_table("contacts_genres")
    op.drop_index("ix_contacts_id", table_name="contacts")
    op.drop_table("contacts")
    op.drop_table("song_genres")
    op.drop_index("ix_genres_id", table_name="genres")
    op.drop_table("genres")
    op.drop_index("ix_categories_id", table_name="categories")
    op.drop_table("categories")
    op.drop_index("ix_songs_id", table_name="songs")
    op.drop_table("songs")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "songs",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('songs_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("link", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="songs_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_songs_id", "songs", ["id"], unique=False)
    op.create_table(
        "categories",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="categories_pkey"),
        sa.UniqueConstraint("name", name="categories_name_key"),
    )
    op.create_index("ix_categories_id", "categories", ["id"], unique=False)
    op.create_table(
        "genres",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('genres_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="genres_pkey"),
        sa.UniqueConstraint("name", name="genres_name_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_genres_id", "genres", ["id"], unique=False)
    op.create_table(
        "song_genres",
        sa.Column("Song ID", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("Genre ID", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["Genre ID"], ["genres.id"], name="song_genres_Genre ID_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["Song ID"], ["songs.id"], name="song_genres_Song ID_fkey"
        ),
        sa.PrimaryKeyConstraint("Song ID", "Genre ID", name="song_genres_pkey"),
    )
    op.create_table(
        "contacts",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('contacts_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("instagram", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("company", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("genre", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("type_", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("position", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("site", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="contacts_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_contacts_id", "contacts", ["id"], unique=False)
    op.create_table(
        "contacts_genres",
        sa.Column("Contact ID", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("Genre ID", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["Contact ID"], ["contacts.id"], name="contacts_genres_Contact ID_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["Genre ID"], ["genres.id"], name="contacts_genres_Genre ID_fkey"
        ),
        sa.PrimaryKeyConstraint("Contact ID", "Genre ID", name="contacts_genres_pkey"),
    )
    op.create_table(
        "companies",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("company_type", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="companies_pkey"),
        sa.UniqueConstraint("company_type", name="companies_company_type_key"),
    )
    op.create_index("ix_companies_id", "companies", ["id"], unique=False)
    op.create_table(
        "positions",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="positions_pkey"),
        sa.UniqueConstraint("name", name="positions_name_key"),
    )
    op.create_index("ix_positions_id", "positions", ["id"], unique=False)
    op.create_table(
        "sent",
        sa.Column("Contact ID", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("Song ID", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["Contact ID"], ["contacts.id"], name="sent_Contact ID_fkey"
        ),
        sa.ForeignKeyConstraint(["Song ID"], ["songs.id"], name="sent_Song ID_fkey"),
        sa.PrimaryKeyConstraint("Contact ID", "Song ID", name="sent_pkey"),
    )
    # ### end Alembic commands ###
